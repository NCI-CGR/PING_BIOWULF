library(BiocParallel)
# code from https://hpc.nih.gov/apps/R.html#biocparallel
detectBatchCPUs <- function() {
ncores <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))
if (is.na(ncores)) {
ncores <- as.integer(Sys.getenv("SLURM_JOB_CPUS_PER_NODE"))
}
if (is.na(ncores)) {
return(4) # for helix
}
return(ncores)
}
ncpus <- detectBatchCPUs()
register(MulticoreParam(ncpus))
threads <- ncpus
library(data.table)
library(stringr)
library(methods)
library(pryr)
library(plotly)
library(R.utils)
library(gtools)
library(zip)
fastq_dir <- "/data/DCEG_HPV/PING/fastq/CAR82799"
fastq_pat <- "fastq"
out_dir <- "output/CAR82799"
shortNameDelim <- '_'
source('/data/DCEG_HPV/PING/PING/Resources/general_functions.R')
source('/data/DCEG_HPV/PING/PING/Resources/extractor_functions.R')
source('/data/DCEG_HPV/PING/PING/Resources/ping_copy.R')
source('/data/DCEG_HPV/PING/PING/Resources/ping_allele.R')
source('/data/DCEG_HPV/PING/PING/Resources/ping_gc_align.R')
source('/data/DCEG_HPV/PING/PING/Resources/alleleCombine_functions.R')
outDir <- pathObj(name='output_directory',path=out_dir)
outDir$dirGen()
threads <- ncpus
setDTthreads(threads)
sampleList <- general.paired_sample_objects(fastq_dir, fastq_pat, outDir$path, shortNameDelim)
extractedFastqDirectory <- file.path(out_dir,'extractedFastq')
outDir.extFqDir <-pathObj(name='extractedFqDir',path=extractedFastqDirectory)
outDir.extFqDir$dirGen()
sampleList <- extractor.run(sampleList,threads,outDir.extFqDir$path,forceRun=F)
out_dir
out_dir <- "/data/DCEG_HPV/PING/output/CAR82799"
outDir <- pathObj(name='output_directory',path=out_dir)
outDir$dirGen()
sampleList <- general.paired_sample_objects(fastq_dir, fastq_pat, outDir$path, shortNameDelim)
extractedFastqDirectory <- file.path(out_dir,'extractedFastq')
outDir.extFqDir <-pathObj(name='extractedFqDir',path=extractedFastqDirectory)
outDir.extFqDir$dirGen()
sampleList <- extractor.run(sampleList,threads,outDir.extFqDir$path,forceRun=F)
sampleList <- ping_copy.graph(sampleList=sampleList,threads=threads,resultsDirectory=outDir$path,forceRun=F,onlyKFF=F,fullAlign = F)
source('Resources/genotype_alignment_functions.R')
source('Resources/alleleSetup_functions.R')
rawFastqDirectory = fastq_dir
resultsDirectory = out_dir
source('Resources/general_functions.R')
source('Resources/extractor_functions.R')
source('Resources/ping_copy.R')
source('Resources/ping_allele.R')
source('Resources/ping_gc_align.R')
source('Resources/alleleCombine_functions.R')
source('Resources/genotype_alignment_functions.R')
source('Resources/alleleSetup_functions.R')
outDir <- pathObj(name='output_directory',path=resultsDirectory)
outDir$dirGen()
sampleList <- general.paired_sample_objects(rawFastqDirectory, fastqPattern, outDir$path, shortNameDelim)
extractedFastqDirectory <- file.path(rawFastqDirectory,'extractedFastq')
outDir.extFqDir <-pathObj(name='extractedFqDir',path=extractedFastqDirectory)
outDir.extFqDir$dirGen()
fastqPattern <- fastq_dir
fastqPattern <- fastq_pat
sampleList <- ping_copy.graph(sampleList=sampleList,threads=threads,resultsDirectory=outDir$path,forceRun=F,onlyKFF=F,fullAlign = F)
rawFastqDirectory
fastqPattern
resultsDirectory
outDir <- pathObj(name='output_directory',path=resultsDirectory)
outDir$dirGen()
threads <- ncpus
setDTthreads(threads)
sampleList <- general.paired_sample_objects(rawFastqDirectory, fastqPattern, outDir$path, shortNameDelim)
extractedFastqDirectory <- file.path(rawFastqDirectory,'extractedFastq')
outDir.extFqDir <-pathObj(name='extractedFqDir',path=extractedFastqDirectory)
outDir.extFqDir$dirGen()
sampleList <- extractor.run(sampleList,threads,outDir.extFqDir$path,forceRun=F)
sampleList <- ping_copy.graph(sampleList=sampleList,threads=threads,resultsDirectory=outDir$path,forceRun=F,onlyKFF=F,fullAlign = F)
sapply(sampleList, function(x) x$copyNumber[['KIR2DL2']] <- as.character(2-as.integer(x$copyNumber[['KIR2DL3']])))
sampleList <- ping_copy.graph(sampleList=sampleList,threads=threads,resultsDirectory=outDir$path,forceRun=F,onlyKFF=F,fullAlign = F)
setup.minDP <- 8
final.minDP <- 20
# Run mode variables ------------------------------------------------
setup.hetRatio <- 0.25
final.hetRatio <- 0.25
copy.readBoost <- T
setup.readBoost <- T
final.readBoost <- F
readBoost.thresh <- 2
allele.fullAlign <- F
copy.fullAlign <- F
sampleList <- ping_copy.graph(sampleList=sampleList,threads=threads,resultsDirectory=outDir$path,forceRun=F,onlyKFF=F,fullAlign = F)
sapply(sampleList, function(x) x$copyNumber[['KIR2DL2']] <- as.character(2-as.integer(x$copyNumber[['KIR2DL3']])))
sampleList <- ping_copy.graph(sampleList=sampleList,threads=threads,resultsDirectory=outDir$path,forceRun=F,onlyKFF=F,fullAlign = T)
sampleList <- ping_copy.graph(sampleList=sampleList,threads=threads,resultsDirectory=outDir$path,forceRun=F,onlyKFF=T,fullAlign = F)
sampleList <- ping_copy.manual_threshold(sampleList=sampleList,resultsDirectory=outDir$path,use.threshFile = T)
load("ping12.Rdata")
library(data.table)
library(stringr)
library(methods)
library(pryr)
library(plotly)
library(R.utils)
library(gtools)
library(zip)
library(BiocParallel)
# code from https://hpc.nih.gov/apps/R.html#biocparallel
detectBatchCPUs <- function() {
ncores <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))
if (is.na(ncores)) {
ncores <- as.integer(Sys.getenv("SLURM_JOB_CPUS_PER_NODE"))
}
if (is.na(ncores)) {
return(4) # for helix
}
return(ncores)
}
ncpus <- detectBatchCPUs()
register(MulticoreParam(ncpus))
ncpus
source('Resources/general_functions.R')
source('Resources/extractor_functions.R')
source('Resources/ping_copy.R')
source('Resources/ping_allele.R')
source('Resources/ping_gc_align.R')
source('Resources/alleleCombine_functions.R')
threads <- ncpus
setDTthreads(threads)
source('Resources/genotype_alignment_functions.R')
source('Resources/alleleSetup_functions.R')
sampleList
sampleList <- ping_copy.manual_threshold(sampleList=sampleList,resultsDirectory=outDir$path,use.threshFile = T)
sampleList <- ping_copy.manual_threshold(sampleList=sampleList,resultsDirectory=outDir$path,use.threshFile = F)
sampleList <- ping_copy.manual_threshold(sampleList=sampleList,resultsDirectory=outDir$path,use.threshFile = F)
sampleList <- ping_copy.manual_threshold(sampleList=sampleList,resultsDirectory=outDir$path,use.threshFile = T)
sampleList <- ping_copy.load_copy_results(sampleList, outDir$path)
if(allele.fullAlign){
as.list <- alleleSeq.list
}else{
as.list <- compact.alleleSeq.list
}
probelistFile='probelist_2021_01_24.csv'
gcResourceDirectory <- normalizePath('Resources/gc_resources', mustWork = T)
cat('\n\nReading in the KFF probelist file: ', file.path(gcResourceDirectory, probelistFile))
probeDF <- read.csv(file.path(gcResourceDirectory, probelistFile), stringsAsFactors = F, check.names = F)
row.names(probeDF) <- probeDF$Name
sampleList <- ping_allele(sampleList)
